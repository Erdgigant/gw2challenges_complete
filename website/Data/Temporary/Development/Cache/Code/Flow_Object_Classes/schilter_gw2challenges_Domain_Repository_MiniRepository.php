<?php 
namespace schilter\gw2challenges\Domain\Repository;

/*
 * This file is part of the Internezzo.PassePartout package.
 */
use Neos\Flow\Annotations as Flow;

/**
 * @Flow\Scope("singleton")
 */
class MiniRepository_Original {

	/**	
	 * @FLow\Inject
	 * @var \schilter\gw2challenges\Service\PDOService
	 */
	protected $pdoService;
	
	/**
	 * @Flow\Inject
	 * @var \Neos\Flow\Property\PropertyMapper
	 */
	protected $propertyMapper;
	
	/**
	 * @var \Doctrine\Common\Persistence\ObjectManager
	 * @Flow\Inject
	 */
	protected $entityManager;
	
	public function findAll(){
		$stmt = $this->pdoService->getPdo()->prepare("SELECT * FROM schilter_gw2challenges_domain_model_mini");
		$stmt->execute();
		return $stmt->fetchAll();
	}
	
	public function getById($id){
		$stmt = $this->pdoService->getPdo()->prepare("SELECT * FROM schilter_gw2challenges_domain_model_mini WHERE id =".$id);
		$stmt->execute();
		return $this->propertyMapper->convert(
				$stmt->fetch(), 
				\schilter\gw2challenges\Domain\Model\Mini::class,
				$this->getConfiguration());	
	}
	
	public function removeAll(){
		
		try{
			$this->pdoService->getPdo()->beginTransaction();
			
			$sql = 'DELETE FROM schilter_gw2challenges_domain_model_mini';
			$stmt = $this->pdoService->getPdo()->prepare($sql);
			$stmt->execute();
			
			$this->pdoService->getPdo()->commit();
		}
		catch(\PDOException $e){
			$this->pdoService->getPdo()->rollBack();
			die($e->getMessage());
		}
	}

	public function createMinis($minis){
		try{
			$this->pdoService->getPdo()->beginTransaction();
				
			$constraints = array();
			foreach($minis as $miniArray){
				$mini = $this->propertyMapper->convert(
						$miniArray, 
						\schilter\gw2challenges\Domain\Model\Mini::class,
						$this->getConfiguration());				
				$identifier =  \Neos\Utility\ObjectAccess::getProperty($mini, 'Persistence_Object_Identifier', true);
				$constraints[] = sprintf('(\'%s\', %s, \'%s\', \'%s\')', $identifier, $mini->getId(), addslashes($mini->getName()), $mini->getIcon()) ;
			}
			
			$sql = 'INSERT INTO schilter_gw2challenges_domain_model_mini (persistence_object_identifier, id, name, icon) VALUES '.implode(', ', $constraints);				
			$stmt = $this->pdoService->getPdo()->prepare($sql);
			$stmt->execute();
				
			$this->pdoService->getPdo()->commit();
		}
		catch(\PDOException $e){
			$this->pdoService->getPdo()->rollBack();
			die($e->getMessage());
		}
	}
	
	public function getConfiguration()
	{
		/** @var PropertyMappingConfiguration $configuration */
		$configuration = new \Neos\Flow\Property\PropertyMappingConfiguration();
	
		$configuration->setTypeConverterOptions(\Neos\Flow\Property\TypeConverter\PersistentObjectConverter::class, [
				\Neos\Flow\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_CREATION_ALLOWED => true,
				\Neos\Flow\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_MODIFICATION_ALLOWED => true
		]);	
		$configuration->skipUnknownProperties();
		$configuration->allowProperties('id', 'name', 'icon');	
		
		return $configuration;
	}
}
#
# Start of Flow generated Proxy code
#
namespace schilter\gw2challenges\Domain\Repository;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * 
 * @\Neos\Flow\Annotations\Scope("singleton")
 */
class MiniRepository extends MiniRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'schilter\gw2challenges\Domain\Repository\MiniRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('schilter\gw2challenges\Domain\Repository\MiniRepository', $this);
        if ('schilter\gw2challenges\Domain\Repository\MiniRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'pdoService' => '\\schilter\\gw2challenges\\Service\\PDOService',
  'propertyMapper' => '\\Neos\\Flow\\Property\\PropertyMapper',
  'entityManager' => '\\Doctrine\\Common\\Persistence\\ObjectManager',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'schilter\gw2challenges\Domain\Repository\MiniRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('schilter\gw2challenges\Domain\Repository\MiniRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->pdoService = new \schilter\gw2challenges\Service\PDOService();
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Property\PropertyMapper', 'Neos\Flow\Property\PropertyMapper', 'propertyMapper', '2ab4a1ce2ee31715713d0f207f0ac637', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Property\PropertyMapper'); });
        $this->Flow_Proxy_LazyPropertyInjection('Doctrine\Common\Persistence\ObjectManager', 'Doctrine\Common\Persistence\ObjectManager', 'entityManager', 'b34c32b6d660d4fb8aaafae6c0286b19', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Doctrine\Common\Persistence\ObjectManager'); });
        $this->Flow_Injected_Properties = array (
  0 => 'pdoService',
  1 => 'propertyMapper',
  2 => 'entityManager',
);
    }
}
# PathAndFilename: /var/www/php/Packages/Application/schilter.gw2challenges/Classes/Domain/Repository/MiniRepository.php
#