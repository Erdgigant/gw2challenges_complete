<?php 
namespace schilter\gw2challenges\Service;

use Sandstorm\UserManagement\Domain\Model\RegistrationFlow;
use Sandstorm\UserManagement\Domain\Service\UserCreationServiceInterface;
use schilter\gw2challenges\Domain\Model\User;
use Neos\Flow\Security\Account;
use Neos\Flow\Annotations as Flow;

class CustomUserCreationService_Original implements UserCreationServiceInterface {


	/**
	 * @Flow\Inject
	 * @var \Neos\Flow\Persistence\PersistenceManagerInterface
	 */
	protected $persistenceManager;
	
	/**
	 * @Flow\Inject
	 * @var \Neos\Flow\Security\AccountRepository
	 */
	protected $accountRepository;

	/**
	 * @Flow\Inject
	 * @var \schilter\gw2challenges\Domain\Repository\UserRepository
	 */
	protected $userRepository;

	public function createUserAndAccount(RegistrationFlow $registrationFlow)
	{
		// Create the account
		$account = new Account();
		$account->setAccountIdentifier($registrationFlow->getEmail());
		$account->setCredentialsSource($registrationFlow->getEncryptedPassword());
		$account->setAuthenticationProviderName('Sandstorm.UserManagement:Login');		
		$this->accountRepository->add($account);
		$this->persistenceManager->persistAll();
	
		// Create the user
		$user = new User();
		$user->setAccount($account);
		$user->setApiKey($registrationFlow->getAttributes()['apiKey']);
	
		// Persist user
		$this->userRepository->add($user);	
	
		// Return the user so the controller can directly use it
		return $user;
	}
}
#
# Start of Flow generated Proxy code
#
namespace schilter\gw2challenges\Service;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * 
 */
class CustomUserCreationService extends CustomUserCreationService_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('schilter\gw2challenges\Service\CustomUserCreationService' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'persistenceManager' => '\\Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'accountRepository' => '\\Neos\\Flow\\Security\\AccountRepository',
  'userRepository' => '\\schilter\\gw2challenges\\Domain\\Repository\\UserRepository',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Security\AccountRepository', 'Neos\Flow\Security\AccountRepository', 'accountRepository', '8a496e58843e1121631cc3255b1e5e2d', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Security\AccountRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('schilter\gw2challenges\Domain\Repository\UserRepository', 'schilter\gw2challenges\Domain\Repository\UserRepository', 'userRepository', '48ddfecbb0948caa0c7b056b06d3b0c9', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('schilter\gw2challenges\Domain\Repository\UserRepository'); });
        $this->Flow_Injected_Properties = array (
  0 => 'persistenceManager',
  1 => 'accountRepository',
  2 => 'userRepository',
);
    }
}
# PathAndFilename: /var/www/php/Packages/Application/schilter.gw2challenges/Classes/Service/CustomUserCreationService.php
#