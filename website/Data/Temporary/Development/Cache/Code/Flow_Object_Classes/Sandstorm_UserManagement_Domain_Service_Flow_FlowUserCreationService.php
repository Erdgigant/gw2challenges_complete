<?php 
namespace Sandstorm\UserManagement\Domain\Service\Flow;

use Sandstorm\UserManagement\Domain\Model\RegistrationFlow;
use Sandstorm\UserManagement\Domain\Repository\UserRepository;
use Sandstorm\UserManagement\Domain\Service\UserCreationServiceInterface;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Persistence\PersistenceManagerInterface;
use Neos\Flow\Security\Account;
use Neos\Flow\Security\Policy\Role;
use Sandstorm\UserManagement\Domain\Model\User;

/**
 * @Flow\Scope("singleton")
 */
class FlowUserCreationService_Original implements UserCreationServiceInterface
{

    /**
     * @Flow\Inject
     * @var PersistenceManagerInterface
     */
    protected $persistenceManager;

    /**
     * @Flow\Inject
     * @var UserRepository
     */
    protected $userRepository;

    /**
     * @Flow\InjectConfiguration(path="rolesForNewUsers")
     */
    protected $rolesForNewUsers;

    /**
     * In this method, actually create the user / account.
     *
     * NOTE: After this method is called, the $registrationFlow is DESTROYED, so you need to store all attributes
     * in your object as you need them.
     *
     * @param RegistrationFlow $registrationFlow
     * @return User
     */
    public function createUserAndAccount(RegistrationFlow $registrationFlow)
    {
        // Create the account
        $account = new Account();
        $account->setAccountIdentifier($registrationFlow->getEmail());
        $account->setCredentialsSource($registrationFlow->getEncryptedPassword());
        $account->setAuthenticationProviderName('Sandstorm.UserManagement:Login');

        // Assign pre-configured roles
        foreach ($this->rolesForNewUsers as $roleString) {
            $account->addRole(new Role($roleString));
        }

        // Create the user
        $user = new User();
        $user->setAccount($account);
        $user->setEmail($registrationFlow->getEmail());
        if (array_key_exists('salutation', $registrationFlow->getAttributes())) {
            $user->setGender($registrationFlow->getAttributes()['salutation']);
        }
        if (array_key_exists('firstName', $registrationFlow->getAttributes())) {
            $user->setFirstName($registrationFlow->getAttributes()['firstName']);
        }
        if (array_key_exists('lastName', $registrationFlow->getAttributes())) {
            $user->setLastName($registrationFlow->getAttributes()['lastName']);
        }

        // Persist user
        $this->userRepository->add($user);
        $this->persistenceManager->whitelistObject($user);
        $this->persistenceManager->whitelistObject($account);

        // Return the user so the controller can directly use it
        return $user;
    }
}

#
# Start of Flow generated Proxy code
#
namespace Sandstorm\UserManagement\Domain\Service\Flow;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * 
 * @\Neos\Flow\Annotations\Scope("singleton")
 */
class FlowUserCreationService extends FlowUserCreationService_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Sandstorm\UserManagement\Domain\Service\Flow\FlowUserCreationService') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Sandstorm\UserManagement\Domain\Service\Flow\FlowUserCreationService', $this);
        if ('Sandstorm\UserManagement\Domain\Service\Flow\FlowUserCreationService' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'userRepository' => 'Sandstorm\\UserManagement\\Domain\\Repository\\UserRepository',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Sandstorm\UserManagement\Domain\Service\Flow\FlowUserCreationService') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Sandstorm\UserManagement\Domain\Service\Flow\FlowUserCreationService', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Sandstorm\UserManagement\Domain\Repository\UserRepository', 'Sandstorm\UserManagement\Domain\Repository\UserRepository', 'userRepository', '608cc0a1be6798e43846296e867f1ad1', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Sandstorm\UserManagement\Domain\Repository\UserRepository'); });
        $this->rolesForNewUsers = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Sandstorm.UserManagement.rolesForNewUsers');
        $this->Flow_Injected_Properties = array (
  0 => 'persistenceManager',
  1 => 'userRepository',
  2 => 'rolesForNewUsers',
);
    }
}
# PathAndFilename: /var/www/php/Packages/Application/Sandstorm.UserManagement/Classes/Domain/Service/Flow/FlowUserCreationService.php
#