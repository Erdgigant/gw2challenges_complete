<?php 
namespace Sandstorm\UserManagement\Domain\Validator;

use Sandstorm\UserManagement\Domain\Model\PasswordDto;
use Sandstorm\UserManagement\Domain\Repository\UserRepository;
use Neos\Flow\Annotations as Flow;
use Neos\Error\Messages\Error;
use Neos\Flow\Validation\Exception\InvalidValidationOptionsException;
use Neos\Flow\Validation\Validator\AbstractValidator;

/**
 * Validator for users
 */
class CustomPasswordDtoValidator_Original extends AbstractValidator
{

    /**
     * @var UserRepository
     * @Flow\Inject
     */
    protected $userRepository;

    /**
     * @param PasswordDto $value The value that should be validated
     * @return void
     * @throws InvalidValidationOptionsException
     */
    protected function isValid($value)
    {
        if (!$value->arePasswordsEqual()) {
            $this->result->forProperty('password')->addError(new Error('Passwords do not match.', 1464086581));
        }
    }
}

#
# Start of Flow generated Proxy code
#
namespace Sandstorm\UserManagement\Domain\Validator;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * Validator for users
 */
class CustomPasswordDtoValidator extends CustomPasswordDtoValidator_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     * @param array $options Options for the validator
     * @throws InvalidValidationOptionsException if unsupported options are found
     */
    public function __construct()
    {
        $arguments = func_get_args();
        call_user_func_array('parent::__construct', $arguments);
        if ('Sandstorm\UserManagement\Domain\Validator\CustomPasswordDtoValidator' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'userRepository' => 'Sandstorm\\UserManagement\\Domain\\Repository\\UserRepository',
  'acceptsEmptyValues' => 'boolean',
  'supportedOptions' => 'array',
  'options' => 'array',
  'result' => 'Neos\\Error\\Messages\\Result',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Sandstorm\UserManagement\Domain\Repository\UserRepository', 'Sandstorm\UserManagement\Domain\Repository\UserRepository', 'userRepository', '608cc0a1be6798e43846296e867f1ad1', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Sandstorm\UserManagement\Domain\Repository\UserRepository'); });
        $this->Flow_Injected_Properties = array (
  0 => 'userRepository',
);
    }
}
# PathAndFilename: /var/www/php/Packages/Application/Sandstorm.UserManagement/Classes/Domain/Validator/CustomPasswordDtoValidator.php
#