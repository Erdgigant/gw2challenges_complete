<?php 
namespace schilter\gw2challenges\Service;

use Neos\Flow\Annotations as Flow;
use \Neos\Flow\Configuration\ConfigurationManager;

class PDOService_Original {
	
	
	/**
	 * @Flow\Inject
	 * @var \Neos\Flow\Configuration\ConfigurationManager	
	 */
	protected $configurationManager;
	
	protected $pdo;
	
	public function getPdo(){
		if(!$this->pdo){
			$user = $this->configurationManager->getConfiguration('Settings', 'Neos.Flow.persistence.backendOptions.user');
			$pw = $this->configurationManager->getConfiguration('Settings', 'Neos.Flow.persistence.backendOptions.password');
			$this->pdo = new \PDO(
				"mysql:host=mariadb;dbname=gw2challenge;charset=utf8",
				$user,
				$pw,
				[\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION]
			);
		}
		return $this->pdo;
	}
}
#
# Start of Flow generated Proxy code
#
namespace schilter\gw2challenges\Service;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * 
 */
class PDOService extends PDOService_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('schilter\gw2challenges\Service\PDOService' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'configurationManager' => '\\Neos\\Flow\\Configuration\\ConfigurationManager',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Configuration\ConfigurationManager', 'Neos\Flow\Configuration\ConfigurationManager', 'configurationManager', 'f559bc775c41b957515dc1c69b91d8b1', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Configuration\ConfigurationManager'); });
        $this->Flow_Injected_Properties = array (
  0 => 'configurationManager',
);
    }
}
# PathAndFilename: /var/www/php/Packages/Application/schilter.gw2challenges/Classes/Service/PDOService.php
#